const HuxtTechDealABI = require("../contactsABI/ElectionABI.json");
const TextString = require("../config/TextString");
const responseStatus = require("../config/ResponseStatus");
const conn = require("../config/db_conn");

var Web3 = require("web3");
//const ethereum = require('ethereumjs-tx');
var Tx = require("ethereumjs-tx").Transaction;
const { text } = require("body-parser");
// const web3 = new Web3(
//   new Web3.providers.HttpProvider(
//     "https://data-seed-prebsc-1-s1.binance.org:8545"
//   )
// );

let web3 = new Web3(
  new Web3.providers.HttpProvider(
    "https://kovan.infura.io/v3/9e81cde3134f40019b152fafe6d2f265"
  )
);

// const deployContract = async (req, res, next) => {
//   var HuxtABI = HuxtTechDealABI;
//   var data =
//     "0x6080604052604051604080611d678339810180604052810190808051906020019092919080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050611ca5806100c26000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633a23cc0a146100b45780636ca1608b146101625780637633a22c1461018c5780638da5cb5b1461021c578063a877f21514610273578063bc188bd1146102ca578063c3a1e5b3146102f7578063c5cc426a1461032e578063d4f125971461042a578063f76b51cf14610474578063fe28524814610566575b600080fd5b3480156100c057600080fd5b506100df60048036038101908080359060200190929190505050610586565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390f35b61018a6004803603810190808035906020019092919080359060200190929190505050610655565b005b34801561019857600080fd5b506101a161098b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e15780820151818401526020810190506101c6565b50505050905090810190601f16801561020e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022857600080fd5b506102316109c8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027f57600080fd5b506102886109ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102f560048036038101908080359060200190929190803560000b9060200190929190505050610a13565b005b61032c6004803603810190808035906020019092919080359060200190929190803560000b9060200190929190505050610de6565b005b34801561033a57600080fd5b5061035960048036038101908080359060200190929190505050610fb5565b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001878152602001868152602001858152602001848152602001838152602001828103825288818151815260200191508051906020019080838360005b838110156103e95780820151818401526020810190506103ce565b50505050905090810190601f1680156104165780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6104726004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611157565b005b610564600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611432565b005b61058460048036038101908080359060200190929190505050611a71565b005b6000806000806000806003600088815260200190815260200160002060020160009054906101000a900460ff1615156105be57600080fd5b60036000888152602001908152602001600020915060026000836000015481526020019081526020016000209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816002015482600501600401548360050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16955095509550955050509193509193565b60008060006003600086815260200190815260200160002060020160009054906101000a900460ff16151561068957600080fd5b60036000868152602001908152602001600020925060026000846000015481526020019081526020016000209150600460008460000154815260200190815260200160002090508060060160000160009054906101000a900460ff16801561070257508060060160000160019054906101000a900460ff165b8061073b57508060070160000160009054906101000a900460ff16801561073a57508060070160000160019054906101000a900460ff165b5b151561074657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168260050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156107a757600080fd5b7f587b8bd23b43f29f1f6f1d2d4306080dbcc8f78f1ec918c6812b33001fefc990600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868460020154878660050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a16000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600401549081150290604051600060405180830381858888f1935050505015801561090e573d6000803e3d6000fd5b508160050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600501600201549081150290604051600060405180830381858888f19350505050158015610983573d6000803e3d6000fd5b505050505050565b60606040805190810160405280600781526020017f72756e6e696e6700000000000000000000000000000000000000000000000000815250905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006004600084815260200190815260200160002060080160009054906101000a900460ff161515610a4457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166004600085815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b1557503373ffffffffffffffffffffffffffffffffffffffff166004600085815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515610b2057600080fd5b60046000848152602001908152602001600020905060018260000b1480610b4a575060028260000b145b1515610b5557600080fd5b60018260000b1415610c04573373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610bde5760018160060160000160016101000a81548160ff021916908315150217905550610bff565b60018160060160000160006101000a81548160ff0219169083151502179055505b610ca3565b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c815760018160070160000160016101000a81548160ff021916908315150217905550610ca2565b60018160070160000160006101000a81548160ff0219169083151502179055505b5b7faa375e4da091ccff030b1bbab9ff345148b4a949b73c7556137af25c7a69057583826001018360060160000160019054906101000a900460ff168015610cfb57508360060160000160009054906101000a900460ff165b8460070160000160019054906101000a900460ff168015610d2d57508460070160000160009054906101000a900460ff165b60405180858152602001806020018415151515815260200183151515158152602001828103825285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610dd05780601f10610da557610100808354040283529160200191610dd0565b820191906000526020600020905b815481529060010190602001808311610db357829003601f168201915b50509550505050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4157600080fd5b60026000848152602001908152602001600020600c0160009054906101000a900460ff161515610e7057600080fd5b60018160000b1480610e85575060028160000b145b1515610e9057600080fd5b60018160000b1415610ebc57816002600085815260200190815260200160002060030181905550610f0d565b81600260008581526020019081526020016000206005016001018190555060016002600085815260200190815260200160002060050160060160006101000a81548160ff0219169083151502179055505b7faf54ca7c1ecf75ea1c151f265e9ab3eeecb27d19e8d3ec6b7e199414dd0c1ed6600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848484604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018260000b60000b815260200194505050505060405180910390a1505050565b60006060600080600080600060026000898152602001908152602001600020600c0160009054906101000a900460ff161515610ff057600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008a8152602001908152602001600020600001600260008b815260200190815260200160002060010154600260008c815260200190815260200160002060030154600260008d815260200190815260200160002060040154600260008e815260200190815260200160002060050160010154600260008f815260200190815260200160002060050160020154858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111375780601f1061110c57610100808354040283529160200191611137565b820191906000526020600020905b81548152906001019060200180831161111a57829003601f168201915b505050505095509650965096509650965096509650919395979092949650565b60026000848152602001908152602001600020600c0160009054906101000a900460ff16151561118657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156111e157600080fd5b6004600084815260200190815260200160002060080160009054906101000a900460ff16151561121057600080fd5b600660008154809291906001019190505550606060405190810160405280848152602001600654815260200160011515815250600360006006548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050816002600085815260200190815260200160002060050160040181905550806002600085815260200190815260200160002060050160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004600085815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbc1c01dc0d1e366f76a22e7db8af8028033bd0a521feaf529046a6bc413ce0f0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600654858585604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561148e57600080fd5b60056000815480929190600101919050555060e0604051908101604052808581526020018481526020016005548152602001600081526020016000815260200160e060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600015158152508152602001600115158152506002600060055481526020019081526020016000206000820151816000019080519060200190611574929190611bd4565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff021916908315150217905550505060c082015181600c0160006101000a81548160ff021916908315150217905550905050610120604051908101604052806005548152602001838152602001828152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160408051908101604052806000151581526020016000151581525081526020016040805190810160405280600015158152602001600015158152508152602001600115158152506004600060055481526020019081526020016000206000820151816000015560208201518160010190805190602001906117dc929190611bd4565b5060408201518160020190805190602001906117f9929190611bd4565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908315150217905550505060e08201518160070160008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555050506101008201518160080160006101000a81548160ff0219169083151502179055509050507fb7e953e9d5dc29b2595c1ea82eed1d21925712de892f26dd7323f0040bf3f59c338585600554604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015611a2e578082015181840152602081019050611a13565b50505050905090810190601f168015611a5b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a150505050565b60026000828152602001908152602001600020600c0160009054906101000a900460ff161515611aa057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611afc57600080fd5b346002600083815260200190815260200160002060050160010154600260008481526020019081526020016000206003015401141515611b3b57600080fd5b3460026000838152602001908152602001600020600401819055507f4ca09f9926d2e48ef31cb6b14dbda230c7420702b8a8f5b878dd572c593e99d233823442604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a150565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c1557805160ff1916838001178555611c43565b82800160010185558215611c43579182015b82811115611c42578251825591602001919060010190611c27565b5b509050611c509190611c54565b5090565b611c7691905b80821115611c72576000816000905550600101611c5a565b5090565b905600a165627a7a7230582033f0492d2b54a1d661a3358ef4f8f40f4e90814d39bb4f78017a30ec9e36e4b30029";

//   let contractAddress
//   //who is going to deploy the contract
//   let ownerPrivateKey = req.body.ownerPrivateKey;
//   let ownerPrivateKeyHex = Buffer.from(ownerPrivateKey, "hex");

//   //who want to send order their pass and walletaddr
//   let buyerPrivateKey = req.body.buyerPrivateKey;
//   let buyerPrivateKeyHex = Buffer.from(buyerPrivateKey, "hex");

//   //owner and buyer details
//   let buyerAddress = req.body.buyerAddress;
//   let ownerAddress = req.body.ownerAddress;
//   let userId = req.body.userId;

//   //buyer request product
//   let goods = req.body.goods;
//   var quantity = req.body.quantity;
//   var photoURL = req.body.photoURL;
//   var videoURL = req.body.videoURL;

//   //deploy procedure
//   var contract = new web3.eth.Contract(HuxtABI);
//   const finalData = contract.deploy({
//     data: data,
//     arguments: [buyerAddress, ownerAddress],
//   });

//   const txCount = await web3.eth.getTransactionCount(ownerAddress);

//   const txObject = {
//     nonce: web3.utils.toHex(txCount),
//     gasLimit: web3.utils.toHex(4700000), // Raise the gas limit to a much higher amount
//     gasPrice: web3.utils.toHex(web3.utils.toWei("30", "gwei")),
//     data: finalData.encodeABI(),
//   };

//   const tx = new Tx(txObject, { chain: 42 });
//   tx.sign(ownerPrivateKeyHex);

//   const serializedTx = tx.serialize();
//   const raw = "0x" + serializedTx.toString("hex");

//   await web3.eth
//     .sendSignedTransaction(raw, (err, txHash) => {
//       console.log("trax", txHash);
//       txHash = txHash;
//     })
//     .then((result) => {
//       //store the data
//       // console.log("result", result);
//       contractAddress = result.contractAddress
//       let userContractInsert =
//         "INSERT INTO user_contract_address (id,userId, contractAddress) VALUES (?);";
//       let userContractValue = [null, userId, contractAddress];
//       conn.query(
//         userContractInsert,
//         [userContractValue],
//         async (err, result, fields)  => {
//           if (err) {
//             return res.status(501).json({
//               msg: TextString.Data_Insert_Failed,
//               status: responseStatus.STATUS_BAD_GATEWAY,
//             });
//           } else {
//             console.log("contractAddress",contractAddress)
//             return await deploy(contractAddress).then(result=>{
//               return res.status(200).send({
//                 message: "Order sended successfully",
//                 data: result,
//                 status: responseStatus.STATUS_OK,
//               });
//             }).catch(er=>{
//               console.log("ERR",er)
//               return res.status(200).send({
//                 message: TextString.Order_Failed,
//                 data: null,
//                 status: responseStatus.STATUS_BAD_REQUEST,
//               });
//             })

//           }
//         }
//       );
//     })
//     .catch((err) => {
//       console.log("eror", err);
//       return res.status(200).send({
//         message: "ERROR",
//         data: null,
//         status: responseStatus.STATUS_BAD_GATEWAY,
//       });
//     });

//   async function deploy(contractAddr){
//     try {
//       console.log("RRECI",contractAddr)
//       //process order procedure
//       var contractAddress = contractAddr;
//       var initContract = new web3.eth.Contract(HuxtABI, contractAddress);

//       let checkingBuyerAddr = await initContract.methods.buyerAddr().call();
//       console.log("contractSymbol", checkingBuyerAddr);

//       const txCount = await web3.eth.getTransactionCount(buyerAddress);

//       console.log("ASdasdas", txCount);

//       const txObject = {
//         nonce: web3.utils.toHex(txCount),
//         gasLimit: web3.utils.toHex(4700000), // Raise the gas limit to a much higher amount
//         gasPrice: web3.utils.toHex(web3.utils.toWei("15", "gwei")),
//         to: contractAddress,
//         data: initContract.methods
//           .sendOrder(goods, quantity, photoURL, videoURL)
//           .encodeABI(),
//       };
//       // kovin 42, rinyby 4
//       const tx = new Tx(txObject, { chain: 42 });
//       tx.sign(buyerPrivateKeyHex);

//       const serializedTx = tx.serialize();
//       const raw = "0x" + serializedTx.toString("hex");
//       return await web3.eth
//         .sendSignedTransaction(raw)
//         // .on("OrderSent", function (error, event) {
//         //   console.log("error", error);
//         //   console.log(event);
//         // })
//         .then(function (OrderSent) {
//           console.log("OrderSent",OrderSent)
//           trxHash = OrderSent.transactionHash;
//           return OrderSent;
//           // contract.getPastEvents(
//           //   "OrderSent",
//           //   {
//           //     filter: { transactionHash: [trxHash] },
//           //   },
//           //   function (error, result) {
//           //     console.log("result",result)
//           //     if (!error) {
//           //       output.data = result;
//           //       output.msg = TextString.Order_Success;
//           //       output.status = responseStatus.STATUS_OK;
//           //     } else {
//           //       output.data = error;
//           //       output.msg = TextString.Order_Failed;
//           //       output.status = responseStatus.STATUS_NOT_FOUND;
//           //     }
//           //     return output
//           //   }
//           // );
//         });
//     } catch (error) {
//       console.log("ERROR", error);
//       res.json({ error: true, data: { message: error.message } });
//     }
//   };
// };
const deployContract = async (req, res, next) => {
  console.log("req",req.body)
  var HuxtABI = HuxtTechDealABI;
  var data =
    "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612325806100606000396000f3fe6080604052600436106100dd5760003560e01c8063bc188bd11161007f578063d4f1259711610059578063d4f12597146102a3578063f76b51cf146102bf578063f9df94f5146102db578063fe28524814610304576100dd565b8063bc188bd114610228578063c3a1e5b314610244578063c5cc426a14610260576100dd565b80637633a22c116100bb5780637633a22c146101695780638447e840146101945780638da5cb5b146101d2578063a877f215146101fd576100dd565b80632bf326b1146100e25780633a23cc0a1461010d5780636ca1608b1461014d575b600080fd5b3480156100ee57600080fd5b506100f7610320565b6040516101049190611cd3565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190611a68565b610346565b6040516101449493929190611db0565b60405180910390f35b61016760048036038101906101629190611ad5565b610414565b005b34801561017557600080fd5b5061017e6106d4565b60405161018b9190611efb565b60405180910390f35b3480156101a057600080fd5b506101bb60048036038101906101b69190611a68565b610711565b6040516101c9929190611ed2565b60405180910390f35b3480156101de57600080fd5b506101e761075f565b6040516101f49190611cd3565b60405180910390f35b34801561020957600080fd5b50610212610783565b60405161021f9190611cd3565b60405180910390f35b610242600480360381019061023d9190611a95565b6107a9565b005b61025e60048036038101906102599190611b68565b610ada565b005b34801561026c57600080fd5b5061028760048036038101906102829190611a68565b610c5e565b60405161029a9796959493929190611d3a565b60405180910390f35b6102bd60048036038101906102b89190611b15565b610dee565b005b6102d960048036038101906102d491906119ad565b611098565b005b3480156102e757600080fd5b5061030260048036038101906102fd9190611980565b611634565b005b61031e60048036038101906103199190611a68565b611706565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806004600086815260200190815260200160002060020160009054906101000a900460ff1661037957600080fd5b6000600460008781526020019081526020016000209050600060036000836000015481526020019081526020016000209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816002015482600501600401548360050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16955095509550955050509193509193565b6004600083815260200190815260200160002060020160009054906101000a900460ff1661044157600080fd5b60006004600084815260200190815260200160002090506000600360008360000154815260200190815260200160002090506000600560008460000154815260200190815260200160002090508060060160000160009054906101000a900460ff1680156104c057508060060160000160019054906101000a900460ff165b806104f957508060070160000160009054906101000a900460ff1680156104f857508060070160000160019054906101000a900460ff165b5b61050257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168260050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461056157600080fd5b7f587b8bd23b43f29f1f6f1d2d4306080dbcc8f78f1ec918c6812b33001fefc990600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868460020154878660050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105e5959493929190611e7f565b60405180910390a160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600301549081150290604051600060405180830381858888f19350505050158015610657573d6000803e3d6000fd5b508160050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600501600101549081150290604051600060405180830381858888f193505050501580156106cc573d6000803e3d6000fd5b505050505050565b60606040518060400160405280600781526020017f72756e6e696e6700000000000000000000000000000000000000000000000000815250905090565b60008060006005600085815260200190815260200160002090508060060160000160009054906101000a900460ff168160060160000160019054906101000a900460ff169250925050915091565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005600083815260200190815260200160002060080160009054906101000a900460ff166107d657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806108a757503373ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6108b057600080fd5b600060056000848152602001908152602001600020905060018260000b14806108dc575060028260000b145b6108e557600080fd5b60018260000b1415610994573373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561096e5760018160060160000160016101000a81548160ff02191690831515021790555061098f565b60018160060160000160006101000a81548160ff0219169083151502179055505b610a33565b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a115760018160070160000160016101000a81548160ff021916908315150217905550610a32565b60018160070160000160006101000a81548160ff0219169083151502179055505b5b7faa375e4da091ccff030b1bbab9ff345148b4a949b73c7556137af25c7a69057583826001018360060160000160019054906101000a900460ff168015610a8b57508360060160000160009054906101000a900460ff165b8460070160000160019054906101000a900460ff168015610abd57508460070160000160009054906101000a900460ff165b604051610acd9493929190611f3d565b60405180910390a1505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b3257600080fd5b60036000848152602001908152602001600020600c0160009054906101000a900460ff16610b5f57600080fd5b60018160000b1480610b74575060028160000b145b610b7d57600080fd5b60018160000b1415610ba957816003600085815260200190815260200160002060030181905550610bfa565b81600360008581526020019081526020016000206005016001018190555060016003600085815260200190815260200160002060050160060160006101000a81548160ff0219169083151502179055505b7faf54ca7c1ecf75ea1c151f265e9ab3eeecb27d19e8d3ec6b7e199414dd0c1ed6600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848484604051610c519493929190611df5565b60405180910390a1505050565b60006060600080600080600060036000898152602001908152602001600020600c0160009054906101000a900460ff16610c9757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360008a8152602001908152602001600020600001600360008b815260200190815260200160002060010154600360008c815260200190815260200160002060030154600360008d815260200190815260200160002060040154600360008e815260200190815260200160002060050160010154600360008f815260200190815260200160002060050160020154858054610d55906120fd565b80601f0160208091040260200160405190810160405280929190818152602001828054610d81906120fd565b8015610dce5780601f10610da357610100808354040283529160200191610dce565b820191906000526020600020905b815481529060010190602001808311610db157829003601f168201915b505050505095509650965096509650965096509650919395979092949650565b60036000848152602001908152602001600020600c0160009054906101000a900460ff16610e1b57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e7357600080fd5b6005600084815260200190815260200160002060080160009054906101000a900460ff16610ea057600080fd5b60076000815480929190610eb390612160565b91905055506040518060600160405280848152602001600754815260200160011515815250600460006007548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050816003600085815260200190815260200160002060050160040181905550806003600085815260200190815260200160002060050160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806005600085815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbc1c01dc0d1e366f76a22e7db8af8028033bd0a521feaf529046a6bc413ce0f0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660075485858560405161108b959493929190611e7f565b60405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110f257600080fd5b6006600081548092919061110590612160565b91905055506040518060e00160405280858152602001848152602001600654815260200160008152602001600081526020016040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581525081526020016001151581525060036000600654815260200190815260200160002060008201518160000190805190602001906111dc92919061182e565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff021916908315150217905550505060c082015181600c0160006101000a81548160ff0219169083151502179055509050506040518061012001604052806006548152602001838152602001828152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001604051806040016040528060001515815260200160001515815250815260200160405180604001604052806000151581526020016000151581525081526020016001151581525060056000600654815260200190815260200160002060008201518160000155602082015181600101908051906020019061144292919061182e565b50604082015181600201908051906020019061145f92919061182e565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908315150217905550505060e08201518160070160008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555050506101008201518160080160006101000a81548160ff0219169083151502179055509050507fb7e953e9d5dc29b2595c1ea82eed1d21925712de892f26dd7323f0040bf3f59c3385856006546040516116269493929190611cee565b60405180910390a150505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b990611f1d565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036000828152602001908152602001600020600c0160009054906101000a900460ff1661173357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461178d57600080fd5b34600360008381526020019081526020016000206005016001015460036000848152602001908152602001600020600301546117c99190612010565b146117d357600080fd5b3460036000838152602001908152602001600020600401819055507f4ca09f9926d2e48ef31cb6b14dbda230c7420702b8a8f5b878dd572c593e99d2338234426040516118239493929190611e3a565b60405180910390a150565b82805461183a906120fd565b90600052602060002090601f01602090048101928261185c57600085556118a3565b82601f1061187557805160ff19168380011785556118a3565b828001600101855582156118a3579182015b828111156118a2578251825591602001919060010190611887565b5b5090506118b091906118b4565b5090565b5b808211156118cd5760008160009055506001016118b5565b5090565b60006118e46118df84611fae565b611f89565b905082815260208101848484011115611900576118ff61223b565b5b61190b8482856120bb565b509392505050565b600081359050611922816122aa565b92915050565b600081359050611937816122c1565b92915050565b600082601f83011261195257611951612236565b5b81356119628482602086016118d1565b91505092915050565b60008135905061197a816122d8565b92915050565b60006020828403121561199657611995612245565b5b60006119a484828501611913565b91505092915050565b600080600080608085870312156119c7576119c6612245565b5b600085013567ffffffffffffffff8111156119e5576119e4612240565b5b6119f18782880161193d565b9450506020611a028782880161196b565b935050604085013567ffffffffffffffff811115611a2357611a22612240565b5b611a2f8782880161193d565b925050606085013567ffffffffffffffff811115611a5057611a4f612240565b5b611a5c8782880161193d565b91505092959194509250565b600060208284031215611a7e57611a7d612245565b5b6000611a8c8482850161196b565b91505092915050565b60008060408385031215611aac57611aab612245565b5b6000611aba8582860161196b565b9250506020611acb85828601611928565b9150509250929050565b60008060408385031215611aec57611aeb612245565b5b6000611afa8582860161196b565b9250506020611b0b8582860161196b565b9150509250929050565b600080600060608486031215611b2e57611b2d612245565b5b6000611b3c8682870161196b565b9350506020611b4d8682870161196b565b9250506040611b5e86828701611913565b9150509250925092565b600080600060608486031215611b8157611b80612245565b5b6000611b8f8682870161196b565b9350506020611ba08682870161196b565b9250506040611bb186828701611928565b9150509250925092565b611bc481612066565b82525050565b611bd381612078565b82525050565b611be281612084565b82525050565b6000611bf382611ff4565b611bfd8185611fff565b9350611c0d8185602086016120ca565b611c168161224a565b840191505092915050565b60008154611c2e816120fd565b611c388186611fff565b94506001821660008114611c535760018114611c6557611c98565b60ff1983168652602086019350611c98565b611c6e85611fdf565b60005b83811015611c9057815481890152600182019150602081019050611c71565b808801955050505b50505092915050565b6000611cae602183611fff565b9150611cb98261225b565b604082019050919050565b611ccd816120b1565b82525050565b6000602082019050611ce86000830184611bbb565b92915050565b6000608082019050611d036000830187611bbb565b8181036020830152611d158186611be8565b9050611d246040830185611cc4565b611d316060830184611cc4565b95945050505050565b600060e082019050611d4f600083018a611bbb565b8181036020830152611d618189611be8565b9050611d706040830188611cc4565b611d7d6060830187611cc4565b611d8a6080830186611cc4565b611d9760a0830185611cc4565b611da460c0830184611cc4565b98975050505050505050565b6000608082019050611dc56000830187611bbb565b611dd26020830186611cc4565b611ddf6040830185611cc4565b611dec6060830184611bbb565b95945050505050565b6000608082019050611e0a6000830187611bbb565b611e176020830186611cc4565b611e246040830185611cc4565b611e316060830184611bd9565b95945050505050565b6000608082019050611e4f6000830187611bbb565b611e5c6020830186611cc4565b611e696040830185611cc4565b611e766060830184611cc4565b95945050505050565b600060a082019050611e946000830188611bbb565b611ea16020830187611cc4565b611eae6040830186611cc4565b611ebb6060830185611cc4565b611ec86080830184611bbb565b9695505050505050565b6000604082019050611ee76000830185611bca565b611ef46020830184611bca565b9392505050565b60006020820190508181036000830152611f158184611be8565b905092915050565b60006020820190508181036000830152611f3681611ca1565b9050919050565b6000608082019050611f526000830187611cc4565b8181036020830152611f648186611c21565b9050611f736040830185611bca565b611f806060830184611bca565b95945050505050565b6000611f93611fa4565b9050611f9f828261212f565b919050565b6000604051905090565b600067ffffffffffffffff821115611fc957611fc8612207565b5b611fd28261224a565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600061201b826120b1565b9150612026836120b1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561205b5761205a6121a9565b5b828201905092915050565b600061207182612091565b9050919050565b60008115159050919050565b60008160000b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156120e85780820151818401526020810190506120cd565b838111156120f7576000848401525b50505050565b6000600282049050600182168061211557607f821691505b60208210811415612129576121286121d8565b5b50919050565b6121388261224a565b810181811067ffffffffffffffff8211171561215757612156612207565b5b80604052505050565b600061216b826120b1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561219e5761219d6121a9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6122b381612066565b81146122be57600080fd5b50565b6122ca81612084565b81146122d557600080fd5b50565b6122e1816120b1565b81146122ec57600080fd5b5056fea26469706673582212209e0dfd3d206283d48336f2a8b17a92079a0b458ac5e323705410776c2e8a0de064736f6c63430008070033";

  let contractAddress
  //who is going to deploy the contract
  let ownerPrivateKey = req.body.privateKey;
  let ownerPrivateKeyHex = Buffer.from(ownerPrivateKey, "hex")
  let ownerAddress = req.body._buyerAddr
  let userId = req.body.userId
  let productId = req.body.productId

  //deploy procedure
  var contract = new web3.eth.Contract(HuxtABI)
  const finalData = contract.deploy({
    data: data,
    // arguments: [buyerAddress, ownerAddress],
  });

  const txCount = await web3.eth.getTransactionCount(ownerAddress);

  const txObject = {
    nonce: web3.utils.toHex(txCount),
    gasLimit: web3.utils.toHex(4700000), // Raise the gas limit to a much higher amount
    gasPrice: web3.utils.toHex(web3.utils.toWei("15", "gwei")),
    data: finalData.encodeABI(),
  };

  const tx = new Tx(txObject, { chain: 42 });
  tx.sign(ownerPrivateKeyHex);

  const serializedTx = tx.serialize();
  const raw = "0x" + serializedTx.toString("hex");

  await web3.eth
    .sendSignedTransaction(raw, (err, txHash) => {
      // console.log("trax", txHash);
      txHash = txHash;
    })
    .then((result) => {
      //store the data
      console.log("result", result);
      contractAddress = result.contractAddress;
      let query =
        "INSERT INTO deplyed_product (id,userId, productId, contractAddress) VALUES (?);";
      let data = [null, userId, productId, contractAddress];
      conn.query(
        query,
        [data],
        async (err, result, fields) => {
          if (err) {
            return res.status(200).json({
              msg: TextString.Deployed_Failed,
              status: responseStatus.STATUS_BAD_GATEWAY,
            });
          } else {
            let productUpdateQuery = `UPDATE seller_product SET status ="${1}" WHERE id = '${productId}'`;
            conn.query(productUpdateQuery, async (err, result) => {
              if (err) {
                return res.status(200).send({
                  msg: TextString.Deployed_Failed,
                  data: null,
                  status: responseStatus.STATUS_BAD_GATEWAY,
                });
              } else {
                return res.status(200).send({
                  msg: TextString.Deployed_Successful,
                  data: result,
                  status: responseStatus.STATUS_OK,
                });
              }
            });
          }
        }
      );
    })
    .catch((err) => {
      console.log("eror", err);
      return res.status(200).send({
        msg: TextString.Deployed_Failed,
        data: null,
        status: responseStatus.STATUS_BAD_GATEWAY,
      });
    });
};

const adminLogin = async (req, res, next) => {
  const deploy = async () => {
    try {
      console.log("req=========", req.body);
      const _ownerAdd = req.body.address;

      var minABI = ElectionABI;

      var contractAddress = "0x74c8A2f8eA397aF2A9214536640636cB876875cb";
      var contract = new web3.eth.Contract(minABI, contractAddress, {
        from: _ownerAdd,
      });
      let adminInfo = await contract.methods.adminLogin(_ownerAdd).call();
      console.log("adminInfo", adminInfo);

      if (adminInfo) {
        return res.status(200).send({
          message: "Login Successful",
          data: adminInfo,
        });
      } else {
        return res.status(401).send({
          message: "Login Failed",
          data: null,
        });
      }
    } catch (error) {
      return res.status(401).send({
        message: "Login Failed",
        data: error,
      });
    }
  };
  deploy();
};

const checkHealth = async (req, res, next) => {
  console.log("==========", req.body);
  var minABI = HuxtTechDealABI;

  var contractAddress = "0x74c8A2f8eA397aF2A9214536640636cB876875cb";
  var contract = new web3.eth.Contract(minABI, contractAddress);
  let healthStatus = await contract.methods.health().call();
  console.log("contractSymbol", healthStatus);
  const deploy = async () => {
    try {
      res.json({
        error: false,
        data: {
          message: "API SUCCESSFULLY CALLED",
          data: healthStatus,
        },
      });
    } catch (error) {
      console.log("ERROR", error);
      res.json({ error: true, data: { message: error.message } });
    }
  };
  deploy();
};

const owner = async (req, res, next) => {
  console.log("==========", req.body);
  var minABI = HuxtTechDealABI;

  var contractAddress = "0x74c8A2f8eA397aF2A9214536640636cB876875cb";
  var contract = new web3.eth.Contract(minABI, contractAddress);
  let ownerAddress = await contract.methods.buyerAddr().call();
  console.log("contractSymbol", ownerAddress);
  const deploy = async () => {
    try {
      res.json({
        error: false,
        data: {
          message: "API SUCCESSFULLY CALLED",
          data: ownerAddress,
        },
      });
    } catch (error) {
      console.log("ERROR", error);
      res.json({ error: true, data: { message: error.message } });
    }
  };
  deploy();
};

const sendOrderEvent = async (req, res, next) => {
  let output = { status: null, data: null, msg: null };

  console.log("==========", req.body);
  var minABI = HuxtTechDealABI;

  var contractAddress = "0x74c8A2f8eA397aF2A9214536640636cB876875cb";
  var contract = new web3.eth.Contract(minABI, contractAddress);
  let healthStatus = await contract.methods.health().call();
  console.log("healthStatus", healthStatus);

  await contract
    .getPastEvents(
      "OrderSent",
      {
        filter: { address: ["0x74c8A2f8eA397aF2A9214536640636cB876875cb"] },
        fromBlock: 0,
        toBlock: "latest",
      },
      function (error, events) {}
    )
    .then(function (events) {
      console.log("event=========", events);
      output.data = events[0]["returnValues"];
      output.msg = TextString.Data_Found;
      output.status = responseStatus.STATUS_OK;
    });

  // console.log("contractSymbol", healthStatus);
  const deploy = async () => {
    try {
      res.json({
        output,
      });
    } catch (error) {
      console.log("ERROR", error);
      res.json({ error: true, data: { message: error.message } });
    }
  };
  deploy();
};



module.exports = {
  adminLogin,
  deployContract,
  checkHealth,
  owner,
  sendOrderEvent,
};
