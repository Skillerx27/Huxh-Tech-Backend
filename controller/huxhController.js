const HuxtTechDealABI = require("../contactsABI/ElectionABI.json");
const TextString = require("../config/TextString");
const responseStatus = require("../config/ResponseStatus");
const conn = require("../config/db_conn");

var Web3 = require("web3");
//const ethereum = require('ethereumjs-tx');
var Tx = require("ethereumjs-tx").Transaction;
const { text } = require("body-parser");
// const web3 = new Web3(
//   new Web3.providers.HttpProvider(
//     "https://data-seed-prebsc-1-s1.binance.org:8545"
//   )
// );

let web3 = new Web3(
  new Web3.providers.HttpProvider(
    "https://kovan.infura.io/v3/9e81cde3134f40019b152fafe6d2f265"
  )
);

// const deployContract = async (req, res, next) => {
//   var HuxtABI = HuxtTechDealABI;
//   var data =
//     "0x6080604052604051604080611d678339810180604052810190808051906020019092919080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050611ca5806100c26000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633a23cc0a146100b45780636ca1608b146101625780637633a22c1461018c5780638da5cb5b1461021c578063a877f21514610273578063bc188bd1146102ca578063c3a1e5b3146102f7578063c5cc426a1461032e578063d4f125971461042a578063f76b51cf14610474578063fe28524814610566575b600080fd5b3480156100c057600080fd5b506100df60048036038101908080359060200190929190505050610586565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390f35b61018a6004803603810190808035906020019092919080359060200190929190505050610655565b005b34801561019857600080fd5b506101a161098b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e15780820151818401526020810190506101c6565b50505050905090810190601f16801561020e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022857600080fd5b506102316109c8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561027f57600080fd5b506102886109ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102f560048036038101908080359060200190929190803560000b9060200190929190505050610a13565b005b61032c6004803603810190808035906020019092919080359060200190929190803560000b9060200190929190505050610de6565b005b34801561033a57600080fd5b5061035960048036038101908080359060200190929190505050610fb5565b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001878152602001868152602001858152602001848152602001838152602001828103825288818151815260200191508051906020019080838360005b838110156103e95780820151818401526020810190506103ce565b50505050905090810190601f1680156104165780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6104726004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611157565b005b610564600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611432565b005b61058460048036038101908080359060200190929190505050611a71565b005b6000806000806000806003600088815260200190815260200160002060020160009054906101000a900460ff1615156105be57600080fd5b60036000888152602001908152602001600020915060026000836000015481526020019081526020016000209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816002015482600501600401548360050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16955095509550955050509193509193565b60008060006003600086815260200190815260200160002060020160009054906101000a900460ff16151561068957600080fd5b60036000868152602001908152602001600020925060026000846000015481526020019081526020016000209150600460008460000154815260200190815260200160002090508060060160000160009054906101000a900460ff16801561070257508060060160000160019054906101000a900460ff165b8061073b57508060070160000160009054906101000a900460ff16801561073a57508060070160000160019054906101000a900460ff165b5b151561074657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168260050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156107a757600080fd5b7f587b8bd23b43f29f1f6f1d2d4306080dbcc8f78f1ec918c6812b33001fefc990600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868460020154878660050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a16000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600401549081150290604051600060405180830381858888f1935050505015801561090e573d6000803e3d6000fd5b508160050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600501600201549081150290604051600060405180830381858888f19350505050158015610983573d6000803e3d6000fd5b505050505050565b60606040805190810160405280600781526020017f72756e6e696e6700000000000000000000000000000000000000000000000000815250905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006004600084815260200190815260200160002060080160009054906101000a900460ff161515610a4457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166004600085815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610b1557503373ffffffffffffffffffffffffffffffffffffffff166004600085815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515610b2057600080fd5b60046000848152602001908152602001600020905060018260000b1480610b4a575060028260000b145b1515610b5557600080fd5b60018260000b1415610c04573373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610bde5760018160060160000160016101000a81548160ff021916908315150217905550610bff565b60018160060160000160006101000a81548160ff0219169083151502179055505b610ca3565b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c815760018160070160000160016101000a81548160ff021916908315150217905550610ca2565b60018160070160000160006101000a81548160ff0219169083151502179055505b5b7faa375e4da091ccff030b1bbab9ff345148b4a949b73c7556137af25c7a69057583826001018360060160000160019054906101000a900460ff168015610cfb57508360060160000160009054906101000a900460ff165b8460070160000160019054906101000a900460ff168015610d2d57508460070160000160009054906101000a900460ff165b60405180858152602001806020018415151515815260200183151515158152602001828103825285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610dd05780601f10610da557610100808354040283529160200191610dd0565b820191906000526020600020905b815481529060010190602001808311610db357829003601f168201915b50509550505050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e4157600080fd5b60026000848152602001908152602001600020600c0160009054906101000a900460ff161515610e7057600080fd5b60018160000b1480610e85575060028160000b145b1515610e9057600080fd5b60018160000b1415610ebc57816002600085815260200190815260200160002060030181905550610f0d565b81600260008581526020019081526020016000206005016001018190555060016002600085815260200190815260200160002060050160060160006101000a81548160ff0219169083151502179055505b7faf54ca7c1ecf75ea1c151f265e9ab3eeecb27d19e8d3ec6b7e199414dd0c1ed6600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848484604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018260000b60000b815260200194505050505060405180910390a1505050565b60006060600080600080600060026000898152602001908152602001600020600c0160009054906101000a900460ff161515610ff057600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260008a8152602001908152602001600020600001600260008b815260200190815260200160002060010154600260008c815260200190815260200160002060030154600260008d815260200190815260200160002060040154600260008e815260200190815260200160002060050160010154600260008f815260200190815260200160002060050160020154858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111375780601f1061110c57610100808354040283529160200191611137565b820191906000526020600020905b81548152906001019060200180831161111a57829003601f168201915b505050505095509650965096509650965096509650919395979092949650565b60026000848152602001908152602001600020600c0160009054906101000a900460ff16151561118657600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156111e157600080fd5b6004600084815260200190815260200160002060080160009054906101000a900460ff16151561121057600080fd5b600660008154809291906001019190505550606060405190810160405280848152602001600654815260200160011515815250600360006006548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050816002600085815260200190815260200160002060050160040181905550806002600085815260200190815260200160002060050160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004600085815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbc1c01dc0d1e366f76a22e7db8af8028033bd0a521feaf529046a6bc413ce0f0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600654858585604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561148e57600080fd5b60056000815480929190600101919050555060e0604051908101604052808581526020018481526020016005548152602001600081526020016000815260200160e060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600015158152508152602001600115158152506002600060055481526020019081526020016000206000820151816000019080519060200190611574929190611bd4565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff021916908315150217905550505060c082015181600c0160006101000a81548160ff021916908315150217905550905050610120604051908101604052806005548152602001838152602001828152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160408051908101604052806000151581526020016000151581525081526020016040805190810160405280600015158152602001600015158152508152602001600115158152506004600060055481526020019081526020016000206000820151816000015560208201518160010190805190602001906117dc929190611bd4565b5060408201518160020190805190602001906117f9929190611bd4565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908315150217905550505060e08201518160070160008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555050506101008201518160080160006101000a81548160ff0219169083151502179055509050507fb7e953e9d5dc29b2595c1ea82eed1d21925712de892f26dd7323f0040bf3f59c338585600554604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015611a2e578082015181840152602081019050611a13565b50505050905090810190601f168015611a5b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a150505050565b60026000828152602001908152602001600020600c0160009054906101000a900460ff161515611aa057600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611afc57600080fd5b346002600083815260200190815260200160002060050160010154600260008481526020019081526020016000206003015401141515611b3b57600080fd5b3460026000838152602001908152602001600020600401819055507f4ca09f9926d2e48ef31cb6b14dbda230c7420702b8a8f5b878dd572c593e99d233823442604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a150565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c1557805160ff1916838001178555611c43565b82800160010185558215611c43579182015b82811115611c42578251825591602001919060010190611c27565b5b509050611c509190611c54565b5090565b611c7691905b80821115611c72576000816000905550600101611c5a565b5090565b905600a165627a7a7230582033f0492d2b54a1d661a3358ef4f8f40f4e90814d39bb4f78017a30ec9e36e4b30029";

//   let contractAddress
//   //who is going to deploy the contract
//   let ownerPrivateKey = req.body.ownerPrivateKey;
//   let ownerPrivateKeyHex = Buffer.from(ownerPrivateKey, "hex");

//   //who want to send order their pass and walletaddr
//   let buyerPrivateKey = req.body.buyerPrivateKey;
//   let buyerPrivateKeyHex = Buffer.from(buyerPrivateKey, "hex");

//   //owner and buyer details
//   let buyerAddress = req.body.buyerAddress;
//   let ownerAddress = req.body.ownerAddress;
//   let userId = req.body.userId;

//   //buyer request product
//   let goods = req.body.goods;
//   var quantity = req.body.quantity;
//   var photoURL = req.body.photoURL;
//   var videoURL = req.body.videoURL;

//   //deploy procedure
//   var contract = new web3.eth.Contract(HuxtABI);
//   const finalData = contract.deploy({
//     data: data,
//     arguments: [buyerAddress, ownerAddress],
//   });

//   const txCount = await web3.eth.getTransactionCount(ownerAddress);

//   const txObject = {
//     nonce: web3.utils.toHex(txCount),
//     gasLimit: web3.utils.toHex(4700000), // Raise the gas limit to a much higher amount
//     gasPrice: web3.utils.toHex(web3.utils.toWei("30", "gwei")),
//     data: finalData.encodeABI(),
//   };

//   const tx = new Tx(txObject, { chain: 42 });
//   tx.sign(ownerPrivateKeyHex);

//   const serializedTx = tx.serialize();
//   const raw = "0x" + serializedTx.toString("hex");

//   await web3.eth
//     .sendSignedTransaction(raw, (err, txHash) => {
//       console.log("trax", txHash);
//       txHash = txHash;
//     })
//     .then((result) => {
//       //store the data
//       // console.log("result", result);
//       contractAddress = result.contractAddress
//       let userContractInsert =
//         "INSERT INTO user_contract_address (id,userId, contractAddress) VALUES (?);";
//       let userContractValue = [null, userId, contractAddress];
//       conn.query(
//         userContractInsert,
//         [userContractValue],
//         async (err, result, fields)  => {
//           if (err) {
//             return res.status(501).json({
//               msg: TextString.Data_Insert_Failed,
//               status: responseStatus.STATUS_BAD_GATEWAY,
//             });
//           } else {
//             console.log("contractAddress",contractAddress)
//             return await deploy(contractAddress).then(result=>{
//               return res.status(200).send({
//                 message: "Order sended successfully",
//                 data: result,
//                 status: responseStatus.STATUS_OK,
//               });
//             }).catch(er=>{
//               console.log("ERR",er)
//               return res.status(200).send({
//                 message: TextString.Order_Failed,
//                 data: null,
//                 status: responseStatus.STATUS_BAD_REQUEST,
//               });
//             })

//           }
//         }
//       );
//     })
//     .catch((err) => {
//       console.log("eror", err);
//       return res.status(200).send({
//         message: "ERROR",
//         data: null,
//         status: responseStatus.STATUS_BAD_GATEWAY,
//       });
//     });

//   async function deploy(contractAddr){
//     try {
//       console.log("RRECI",contractAddr)
//       //process order procedure
//       var contractAddress = contractAddr;
//       var initContract = new web3.eth.Contract(HuxtABI, contractAddress);

//       let checkingBuyerAddr = await initContract.methods.buyerAddr().call();
//       console.log("contractSymbol", checkingBuyerAddr);

//       const txCount = await web3.eth.getTransactionCount(buyerAddress);

//       console.log("ASdasdas", txCount);

//       const txObject = {
//         nonce: web3.utils.toHex(txCount),
//         gasLimit: web3.utils.toHex(4700000), // Raise the gas limit to a much higher amount
//         gasPrice: web3.utils.toHex(web3.utils.toWei("15", "gwei")),
//         to: contractAddress,
//         data: initContract.methods
//           .sendOrder(goods, quantity, photoURL, videoURL)
//           .encodeABI(),
//       };
//       // kovin 42, rinyby 4
//       const tx = new Tx(txObject, { chain: 42 });
//       tx.sign(buyerPrivateKeyHex);

//       const serializedTx = tx.serialize();
//       const raw = "0x" + serializedTx.toString("hex");
//       return await web3.eth
//         .sendSignedTransaction(raw)
//         // .on("OrderSent", function (error, event) {
//         //   console.log("error", error);
//         //   console.log(event);
//         // })
//         .then(function (OrderSent) {
//           console.log("OrderSent",OrderSent)
//           trxHash = OrderSent.transactionHash;
//           return OrderSent;
//           // contract.getPastEvents(
//           //   "OrderSent",
//           //   {
//           //     filter: { transactionHash: [trxHash] },
//           //   },
//           //   function (error, result) {
//           //     console.log("result",result)
//           //     if (!error) {
//           //       output.data = result;
//           //       output.msg = TextString.Order_Success;
//           //       output.status = responseStatus.STATUS_OK;
//           //     } else {
//           //       output.data = error;
//           //       output.msg = TextString.Order_Failed;
//           //       output.status = responseStatus.STATUS_NOT_FOUND;
//           //     }
//           //     return output
//           //   }
//           // );
//         });
//     } catch (error) {
//       console.log("ERROR", error);
//       res.json({ error: true, data: { message: error.message } });
//     }
//   };
// };
const deployContract = async (req, res, next) => {
  console.log("req",req.body)
  var HuxtABI = HuxtTechDealABI;
  var data =
    "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611f93806100536000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632bf326b1146100d55780633a23cc0a1461012c5780636ca1608b146101da5780637633a22c146102045780638447e840146102945780638da5cb5b146102e4578063a877f2151461033b578063bc188bd114610392578063c3a1e5b3146103bf578063c5cc426a146103f6578063d4f12597146104f2578063f76b51cf1461053c578063f9df94f51461062e578063fe28524814610671575b600080fd5b3480156100e157600080fd5b506100ea610691565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561013857600080fd5b50610157600480360381019080803590602001909291905050506106b7565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390f35b6102026004803603810190808035906020019092919080359060200190929190505050610786565b005b34801561021057600080fd5b50610219610abc565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025957808201518184015260208101905061023e565b50505050905090810190601f1680156102865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a057600080fd5b506102bf60048036038101908080359060200190929190505050610af9565b6040518083151515158152602001821515151581526020019250505060405180910390f35b3480156102f057600080fd5b506102f9610b47565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034757600080fd5b50610350610b6c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103bd60048036038101908080359060200190929190803560000b9060200190929190505050610b92565b005b6103f46004803603810190808035906020019092919080359060200190929190803560000b9060200190929190505050610f65565b005b34801561040257600080fd5b5061042160048036038101908080359060200190929190505050611134565b604051808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001878152602001868152602001858152602001848152602001838152602001828103825288818151815260200191508051906020019080838360005b838110156104b1578082015181840152602081019050610496565b50505050905090810190601f1680156104de5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b61053a6004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112d6565b005b61062c600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506115f2565b005b34801561063a57600080fd5b5061066f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c31565b005b61068f60048036038101908080359060200190929190505050611d5f565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000806004600088815260200190815260200160002060020160009054906101000a900460ff1615156106ef57600080fd5b60046000888152602001908152602001600020915060036000836000015481526020019081526020016000209050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816002015482600501600401548360050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16955095509550955050509193509193565b60008060006004600086815260200190815260200160002060020160009054906101000a900460ff1615156107ba57600080fd5b60046000868152602001908152602001600020925060036000846000015481526020019081526020016000209150600560008460000154815260200190815260200160002090508060060160000160009054906101000a900460ff16801561083357508060060160000160019054906101000a900460ff165b8061086c57508060070160000160009054906101000a900460ff16801561086b57508060070160000160019054906101000a900460ff165b5b151561087757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168260050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156108d857600080fd5b7f587b8bd23b43f29f1f6f1d2d4306080dbcc8f78f1ec918c6812b33001fefc990600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868460020154878660050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a16000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600401549081150290604051600060405180830381858888f19350505050158015610a3f573d6000803e3d6000fd5b508160050160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc83600501600201549081150290604051600060405180830381858888f19350505050158015610ab4573d6000803e3d6000fd5b505050505050565b60606040805190810160405280600781526020017f72756e6e696e6700000000000000000000000000000000000000000000000000815250905090565b60008060006005600085815260200190815260200160002090508060060160000160009054906101000a900460ff168160060160000160019054906101000a900460ff169250925050915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005600084815260200190815260200160002060080160009054906101000a900460ff161515610bc357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166005600085815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610c9457503373ffffffffffffffffffffffffffffffffffffffff166005600085815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b1515610c9f57600080fd5b60056000848152602001908152602001600020905060018260000b1480610cc9575060028260000b145b1515610cd457600080fd5b60018260000b1415610d83573373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d5d5760018160060160000160016101000a81548160ff021916908315150217905550610d7e565b60018160060160000160006101000a81548160ff0219169083151502179055505b610e22565b3373ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e005760018160070160000160016101000a81548160ff021916908315150217905550610e21565b60018160070160000160006101000a81548160ff0219169083151502179055505b5b7faa375e4da091ccff030b1bbab9ff345148b4a949b73c7556137af25c7a69057583826001018360060160000160019054906101000a900460ff168015610e7a57508360060160000160009054906101000a900460ff165b8460070160000160019054906101000a900460ff168015610eac57508460070160000160009054906101000a900460ff165b60405180858152602001806020018415151515815260200183151515158152602001828103825285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015610f4f5780601f10610f2457610100808354040283529160200191610f4f565b820191906000526020600020905b815481529060010190602001808311610f3257829003601f168201915b50509550505050505060405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fc057600080fd5b60036000848152602001908152602001600020600c0160009054906101000a900460ff161515610fef57600080fd5b60018160000b1480611004575060028160000b145b151561100f57600080fd5b60018160000b141561103b5781600360008581526020019081526020016000206003018190555061108c565b81600360008581526020019081526020016000206005016001018190555060016003600085815260200190815260200160002060050160060160006101000a81548160ff0219169083151502179055505b7faf54ca7c1ecf75ea1c151f265e9ab3eeecb27d19e8d3ec6b7e199414dd0c1ed6600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848484604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018260000b60000b815260200194505050505060405180910390a1505050565b60006060600080600080600060036000898152602001908152602001600020600c0160009054906101000a900460ff16151561116f57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360008a8152602001908152602001600020600001600360008b815260200190815260200160002060010154600360008c815260200190815260200160002060030154600360008d815260200190815260200160002060040154600360008e815260200190815260200160002060050160010154600360008f815260200190815260200160002060050160020154858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112b65780601f1061128b576101008083540402835291602001916112b6565b820191906000526020600020905b81548152906001019060200180831161129957829003601f168201915b505050505095509650965096509650965096509650919395979092949650565b60036000848152602001908152602001600020600c0160009054906101000a900460ff16151561130557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561136057600080fd5b6005600084815260200190815260200160002060080160009054906101000a900460ff16151561138f57600080fd5b600760008154809291906001019190505550606060405190810160405280848152602001600754815260200160011515815250600460006007548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550905050816003600085815260200190815260200160002060050160040181905550806003600085815260200190815260200160002060050160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806005600085815260200190815260200160002060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbc1c01dc0d1e366f76a22e7db8af8028033bd0a521feaf529046a6bc413ce0f0600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600754858585604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561164e57600080fd5b60066000815480929190600101919050555060e0604051908101604052808581526020018481526020016006548152602001600081526020016000815260200160e060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600015158152508152602001600115158152506003600060065481526020019081526020016000206000820151816000019080519060200190611734929190611ec2565b506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff021916908315150217905550505060c082015181600c0160006101000a81548160ff021916908315150217905550905050610120604051908101604052806006548152602001838152602001828152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001604080519081016040528060001515815260200160001515815250815260200160408051908101604052806000151581526020016000151581525081526020016001151581525060056000600654815260200190815260200160002060008201518160000155602082015181600101908051906020019061199c929190611ec2565b5060408201518160020190805190602001906119b9929190611ec2565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060160008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908315150217905550505060e08201518160070160008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555050506101008201518160080160006101000a81548160ff0219169083151502179055509050507fb7e953e9d5dc29b2595c1ea82eed1d21925712de892f26dd7323f0040bf3f59c338585600654604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015611bee578082015181840152602081019050611bd3565b50505050905090810190601f168015611c1b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a150505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f6f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f81526020017f6e0000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036000828152602001908152602001600020600c0160009054906101000a900460ff161515611d8e57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611dea57600080fd5b346003600083815260200190815260200160002060050160010154600360008481526020019081526020016000206003015401141515611e2957600080fd5b3460036000838152602001908152602001600020600401819055507f4ca09f9926d2e48ef31cb6b14dbda230c7420702b8a8f5b878dd572c593e99d233823442604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a150565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f0357805160ff1916838001178555611f31565b82800160010185558215611f31579182015b82811115611f30578251825591602001919060010190611f15565b5b509050611f3e9190611f42565b5090565b611f6491905b80821115611f60576000816000905550600101611f48565b5090565b905600a165627a7a72305820b5e432947234571e0194306a842b14c6a9e2d309baa51d9ac901c018dac355ba0029";

  let contractAddress
  //who is going to deploy the contract
  let ownerPrivateKey = req.body.privateKey;
  let ownerPrivateKeyHex = Buffer.from(ownerPrivateKey, "hex")
  let ownerAddress = req.body._buyerAddr
  let userId = req.body.userId
  let productId = req.body.productId

  //deploy procedure
  var contract = new web3.eth.Contract(HuxtABI)
  const finalData = contract.deploy({
    data: data,
    // arguments: [buyerAddress, ownerAddress],
  });

  const txCount = await web3.eth.getTransactionCount(ownerAddress);

  const txObject = {
    nonce: web3.utils.toHex(txCount),
    gasLimit: web3.utils.toHex(4700000), // Raise the gas limit to a much higher amount
    gasPrice: web3.utils.toHex(web3.utils.toWei("15", "gwei")),
    data: finalData.encodeABI(),
  };

  const tx = new Tx(txObject, { chain: 42 });
  tx.sign(ownerPrivateKeyHex);

  const serializedTx = tx.serialize();
  const raw = "0x" + serializedTx.toString("hex");

  await web3.eth
    .sendSignedTransaction(raw, (err, txHash) => {
      // console.log("trax", txHash);
      txHash = txHash;
    })
    .then((result) => {
      //store the data
      console.log("result", result);
      contractAddress = result.contractAddress;
      let query =
        "INSERT INTO deplyed_product (id,userId, productId, contractAddress) VALUES (?);";
      let data = [null, userId, productId, contractAddress];
      conn.query(
        query,
        [data],
        async (err, result, fields) => {
          if (err) {
            return res.status(200).json({
              msg: TextString.Deployed_Failed,
              status: responseStatus.STATUS_BAD_GATEWAY,
            });
          } else {
            let productUpdateQuery = `UPDATE seller_product SET status ="${1}" WHERE id = '${productId}'`;
            conn.query(productUpdateQuery, async (err, result) => {
              if (err) {
                return res.status(200).send({
                  msg: TextString.Deployed_Failed,
                  data: null,
                  status: responseStatus.STATUS_BAD_GATEWAY,
                });
              } else {
                return res.status(200).send({
                  msg: TextString.Deployed_Successful,
                  data: result,
                  status: responseStatus.STATUS_OK,
                });
              }
            });
          }
        }
      );
    })
    .catch((err) => {
      console.log("eror", err);
      return res.status(200).send({
        msg: TextString.Deployed_Failed,
        data: null,
        status: responseStatus.STATUS_BAD_GATEWAY,
      });
    });
};

const adminLogin = async (req, res, next) => {
  const deploy = async () => {
    try {
      console.log("req=========", req.body);
      const _ownerAdd = req.body.address;

      var minABI = ElectionABI;

      var contractAddress = "0x74c8A2f8eA397aF2A9214536640636cB876875cb";
      var contract = new web3.eth.Contract(minABI, contractAddress, {
        from: _ownerAdd,
      });
      let adminInfo = await contract.methods.adminLogin(_ownerAdd).call();
      console.log("adminInfo", adminInfo);

      if (adminInfo) {
        return res.status(200).send({
          message: "Login Successful",
          data: adminInfo,
        });
      } else {
        return res.status(401).send({
          message: "Login Failed",
          data: null,
        });
      }
    } catch (error) {
      return res.status(401).send({
        message: "Login Failed",
        data: error,
      });
    }
  };
  deploy();
};

const checkHealth = async (req, res, next) => {
  console.log("==========", req.body);
  var minABI = HuxtTechDealABI;

  var contractAddress = "0x74c8A2f8eA397aF2A9214536640636cB876875cb";
  var contract = new web3.eth.Contract(minABI, contractAddress);
  let healthStatus = await contract.methods.health().call();
  console.log("contractSymbol", healthStatus);
  const deploy = async () => {
    try {
      res.json({
        error: false,
        data: {
          message: "API SUCCESSFULLY CALLED",
          data: healthStatus,
        },
      });
    } catch (error) {
      console.log("ERROR", error);
      res.json({ error: true, data: { message: error.message } });
    }
  };
  deploy();
};

const owner = async (req, res, next) => {
  console.log("==========", req.body);
  var minABI = HuxtTechDealABI;

  var contractAddress = "0x74c8A2f8eA397aF2A9214536640636cB876875cb";
  var contract = new web3.eth.Contract(minABI, contractAddress);
  let ownerAddress = await contract.methods.buyerAddr().call();
  console.log("contractSymbol", ownerAddress);
  const deploy = async () => {
    try {
      res.json({
        error: false,
        data: {
          message: "API SUCCESSFULLY CALLED",
          data: ownerAddress,
        },
      });
    } catch (error) {
      console.log("ERROR", error);
      res.json({ error: true, data: { message: error.message } });
    }
  };
  deploy();
};

const sendOrderEvent = async (req, res, next) => {
  let output = { status: null, data: null, msg: null };

  console.log("==========", req.body);
  var minABI = HuxtTechDealABI;

  var contractAddress = "0x74c8A2f8eA397aF2A9214536640636cB876875cb";
  var contract = new web3.eth.Contract(minABI, contractAddress);
  let healthStatus = await contract.methods.health().call();
  console.log("healthStatus", healthStatus);

  await contract
    .getPastEvents(
      "OrderSent",
      {
        filter: { address: ["0x74c8A2f8eA397aF2A9214536640636cB876875cb"] },
        fromBlock: 0,
        toBlock: "latest",
      },
      function (error, events) {}
    )
    .then(function (events) {
      console.log("event=========", events);
      output.data = events[0]["returnValues"];
      output.msg = TextString.Data_Found;
      output.status = responseStatus.STATUS_OK;
    });

  // console.log("contractSymbol", healthStatus);
  const deploy = async () => {
    try {
      res.json({
        output,
      });
    } catch (error) {
      console.log("ERROR", error);
      res.json({ error: true, data: { message: error.message } });
    }
  };
  deploy();
};



module.exports = {
  adminLogin,
  deployContract,
  checkHealth,
  owner,
  sendOrderEvent,
};
